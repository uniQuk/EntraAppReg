<#
.SYNOPSIS
    Gets the certificate generation settings for the EntraAppReg module.

.DESCRIPTION
    The Get-EntraCertificateSettings function retrieves the certificate generation settings
    for the EntraAppReg module from the CertificateSettings.json configuration file.
    
    These settings include the preferred certificate generation method, default key size,
    default validity period, and other certificate-related preferences.
    
    It supports the module's configuration path resolution system, checking user-specific
    settings before falling back to module defaults.

.PARAMETER ForceRefresh
    If specified, forces a refresh of the cached settings.

.EXAMPLE
    Get-EntraCertificateSettings
    Returns the current certificate generation settings.

.EXAMPLE
    Get-EntraCertificateSettings -ForceRefresh
    Forces a refresh of the cached settings and returns the updated values.

.OUTPUTS
    PSObject
    Returns an object containing certificate generation settings.

.NOTES
    This function is part of the EntraAppReg module's configuration system and is used
    internally by certificate generation functions.
#>
function Get-EntraCertificateSettings {
    [CmdletBinding()]
    [OutputType([PSObject])]
    param (
        [Parameter(Mandatory = $false)]
        [switch]$ForceRefresh
    )

    begin {
        Write-Verbose "Getting certificate generation settings"
    }

    process {
        try {
            # Check if settings are cached and no force refresh requested
            if (-not $ForceRefresh -and $script:CertificateSettings) {
                Write-Verbose "Using cached certificate settings"
                return $script:CertificateSettings
            }

            $configFileName = "CertificateSettings.json"

            # Try to get the user configuration file first
            $userConfigPath = Get-EntraConfigurationPath -ConfigType UserDefault -CreateIfNotExists
            $userConfigFile = Join-Path -Path $userConfigPath -ChildPath $configFileName
            
            # Then fall back to the module configuration file
            $moduleConfigPath = Get-EntraConfigurationPath -ConfigType ModuleDefault
            $moduleConfigFile = Join-Path -Path $moduleConfigPath -ChildPath $configFileName
            
            $configFile = $null
            
            # Check if user config exists
            if (Test-Path -Path $userConfigFile) {
                Write-Verbose "Using user certificate settings from: $userConfigFile"
                $configFile = $userConfigFile
            }
            # Otherwise use module default config
            elseif (Test-Path -Path $moduleConfigFile) {
                Write-Verbose "Using module default certificate settings from: $moduleConfigFile"
                $configFile = $moduleConfigFile
            }
            else {
                Write-Warning "No certificate settings configuration file found. Using hardcoded defaults."
                # Return default settings
                $script:CertificateSettings = [PSCustomObject]@{
                    CertificateGeneration = [PSCustomObject]@{
                        PreferredMethod = "Auto"
                        DefaultKeySize = 2048
                        DefaultValidityDays = 365
                        CommentOnGeneration = "This certificate was generated by EntraAppReg module"
                    }
                    SecuritySettings = [PSCustomObject]@{
                        MinimumKeySize = 2048
                        MaximumValidityDays = 1825
                        PasswordComplexity = "Guid"
                    }
                }
                return $script:CertificateSettings
            }
            
            # Read and parse the JSON file
            try {
                $settingsJson = Get-Content -Path $configFile -Raw
                $settings = $settingsJson | ConvertFrom-Json
                
                # Cache the settings for future use
                $script:CertificateSettings = $settings
                
                Write-Verbose "Certificate settings loaded successfully"
                return $settings
            }
            catch {
                Write-Warning "Failed to parse certificate settings file: $_"
                Write-Warning "Using hardcoded defaults instead."
                
                # Return default settings on error
                $script:CertificateSettings = [PSCustomObject]@{
                    CertificateGeneration = [PSCustomObject]@{
                        PreferredMethod = "Auto"
                        DefaultKeySize = 2048
                        DefaultValidityDays = 365
                        CommentOnGeneration = "This certificate was generated by EntraAppReg module"
                    }
                    SecuritySettings = [PSCustomObject]@{
                        MinimumKeySize = 2048
                        MaximumValidityDays = 1825
                        PasswordComplexity = "Guid"
                    }
                }
                return $script:CertificateSettings
            }
        }
        catch {
            Write-Error "Error getting certificate settings: $_"
            throw $_
        }
    }
}
